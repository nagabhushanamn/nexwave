package com.mts.spring;

import java.io.IOException;
import java.util.Properties;

import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;

import org.apache.commons.dbcp.BasicDataSource;
import org.hibernate.SessionFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.orm.hibernate5.HibernateTransactionManager;
import org.springframework.orm.hibernate5.LocalSessionFactoryBean;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

@Configuration
@ComponentScan(basePackages = { "com.mts.service", "com.mts.repository" })
@EnableTransactionManagement
@EnableJpaRepositories(basePackages = { "com.mts.repository" })
public class AppConfig {

	@Bean
	public DataSource dataSource() {
		BasicDataSource dataSource = new BasicDataSource();
		dataSource.setDriverClassName("com.mysql.jdbc.Driver");
		dataSource.setUrl("jdbc:mysql://localhost:3306/mts");
		dataSource.setUsername("root");
		dataSource.setPassword("admin");
		dataSource.setMaxActive(5);
		dataSource.setMaxIdle(30);
		return dataSource;
	}

	// -----------------------------------------------------------------

	// JDBC

	@Bean
	public PlatformTransactionManager transactionManager() {
		DataSourceTransactionManager tm = new DataSourceTransactionManager();
		tm.setDataSource(dataSource());
		return tm;
	}

	// -----------------------------------------------------------------

	// Hibernate

	@Bean
	public SessionFactory sessionFactory() {
		SessionFactory sessionFactory = null;
		LocalSessionFactoryBean factoryBean = new LocalSessionFactoryBean();
		factoryBean.setDataSource(dataSource());
		factoryBean.setPackagesToScan("com.mts.model");

		Properties props = new Properties();
		props.setProperty("hibernate.show_sql", "true");

		factoryBean.setHibernateProperties(props);

		try {
			factoryBean.afterPropertiesSet();
			sessionFactory = factoryBean.getObject();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return sessionFactory;
	}

	@Bean
	public PlatformTransactionManager hibernateTransactionManager() {
		HibernateTransactionManager tm = new HibernateTransactionManager();
		tm.setSessionFactory(sessionFactory());
		return tm;
	}

	// -----------------------------------------------------------------

	// JPA

	public LocalContainerEntityManagerFactoryBean entityManagerFactory() {
		LocalContainerEntityManagerFactoryBean entityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean();
		entityManagerFactoryBean.setDataSource(dataSource());
		return entityManagerFactoryBean;
	}

}
